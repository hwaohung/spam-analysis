input {
    file {
        path => "/media/johnny/C66E87A36E878B3F/Spam data/*.txt"
        start_position => beginning
        sincedb_path => "/home/johnny/Documents/record.db"
        
        codec => multiline {
            pattern => "^Delivered-To:"
            negate => true
            what => "previous"
        }
    } 
} 

filter {
    # Delivered-To
    grok {
        match => { "message" => "^Delivered-To:\s%{GREEDYDATA:delivered-to}\s"}
    }

    # Received
    grok {
	match => [ "message", "(?<Received>(Received:\s(from%{GREEDYDATA}\s*by%{GREEDYDATA}(\s*with)?)?%{GREEDYDATA}\d+:\d+:\d+\s[+-]\d\d\d\d\s)+)"]
    }

    # Split Received into array
    mutate { 
    	split => ["Received", "Received:"]
    }

    # Date
    grok {
        match => [ "message", "^Date:\s%{GREEDYDATA:Date}\s"]
    }

    # Subject
    grok {
        match => [ "message", "^Subject:\s%{GREEDYDATA:Subject}\s"]
    }

    # From
    grok {
        match => [ "message", "^From:\s%{GREEDYDATA:From}\s"]
    }

    # To
    grok {
        match => [ "message", "^To:\s%{GREEDYDATA:To}\s"]
    }

    # Content-Length & Content
    grok {
        match => [ "message", "Content-Length:\s%{POSINT:Content-Length}\s+(?<CONTENT>(%{GREEDYDATA}\s*)+)"]
    }
}

output { 
    #stdout {
    #	codec => rubydebug
    #}
    elasticsearch { 
        host => localhost
        codec => json
    } 
}
