input {
    file {
        path => "/media/johnny/C66E87A36E878B3F/Spam data/*.txt"
        start_position => beginning
        sincedb_path => "/home/johnny/Documents/record.db"
        
        codec => multiline {
            pattern => "^Delivered-To:"
            negate => true
            what => "previous"
        }
    } 
} 

filter {

    #Delivered-To
    grok {
        match => { "message" => "^Delivered-To:\s%{DATA}(?<delivered-to>[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+\.[a-zA-Z]{2,4})"}
    }

    #fetch ip
    if "X-Originating-IP:" in [message] {
        grok {
            match => { "message" => "^X-Originating-IP:\s%{IP:X-Originating-IP}"}
        }
    } else {
        grok {
            match => [ "message", "(?<X-Originating-IP>(?<![0-9])(?:(?:1[0-2][0-6]|[1-9][1-9]|[0-9])[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})|(?:12[8-9]|1[3-6][0-9]|17[13-9]|18[0-9]|19[01])[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})|172[.](?:[0-9]|1[0-5]|3[2-9]|[4-9][0-9]|25[0-5]|2[0-4][0-9]|1[0-9][0-9])[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})|(?:19[3-9]|2[0-2][0-3])[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})|192[.](?:25[0-5]|2[0-4][0-9]|1[0-57-9][0-9]|16[0-79]|[1-9][0-9]|[0-9])[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9]))"]
        }
    }

    #Date
    if "Date:" in [message] {
        grok {
            match => [ "message", "^Date:\s%{GREEDYDATA},\s(?<Date>%{MONTHDAY}\s%{MONTH}\s%{YEAR}\s%{TIME}\s[+-]\d{4})"]
        }       
    } else {
        # if not exist, find date in [Received]
        grok {
            match => [ "message", "(?<Date>%{MONTHDAY}\s%{MONTH}\s%{YEAR}\s%{TIME}\s[+-]\d{4})"]
        }
    }
    
    # Content-Length
    if "Content-Length:" in [message] {
        grok {
            match => [ "message", "^Content-Length:\s%{POSINT:Content-Length}"]
        }
    }

    #Subject
    grok {
        match => [ "message", "^Subject:\s%{GREEDYDATA:Subject}"]
    }

    #From
    grok {
        match => [ "message", "^From:\s%{DATA}(?<From>[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+\.[a-zA-Z]{2,4})"]
    }

    #To
    grok {
        match => [ "message", "^To:\s%{DATA}(?<To>[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+\.[a-zA-Z]{2,4})"]
        add_tag => [ "finish"]
    }

    #time format
    date {
        match => ["Date", "d MMM yyyy HH:mm:ss Z"]
        locale => "en"
    }

    #remove useless fields
    if "finish" in [tags] {
        mutate {
            remove_field => [ "message", "tags", "host", "path", "@version"]
        }
    }
}

output { 
    #stdout {
    #	codec => rubydebug
    #}
    elasticsearch { 
        host => localhost
        codec => json
    } 
}
